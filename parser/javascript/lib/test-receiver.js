// Generated by CoffeeScript 2.5.1
(function() {
  var TestReceiver;

  require('./prelude');

  global.TestReceiver = TestReceiver = class TestReceiver {
    constructor() {
      this.flow_start = false;
      this.events = [];
      this.flow_pair = false;
    }

    output() {
      return [...this.events, ''].join("\n");
    }

    try__ns_flow_pair() {
      return this.flow_pair = true;
    }

    not__ns_flow_pair() {
      return this.flow_pair = false;
    }

    got__ns_flow_pair() {
      return die();
    }

    try__l_yaml_stream() {
      return this.events.push('+STR');
    }

    got__l_yaml_stream() {
      return this.events.push('-STR');
    }

    try__s_l_flow_in_block() {
      return this.flow_start = true;
    }

    try__l_bare_document() {
      return this.events.push('+DOC');
    }

    got__l_bare_document() {
      return this.events.push('-DOC');
    }

    got__c_flow_sequence__all__x5b() {
      if (!this.flow_start) {
        return;
      }
      if (this.flow_pair) {
        return;
      }
      return this.events.push('+SEQ []');
    }

    got__c_flow_sequence__all__x5d() {
      if (!this.flow_start) {
        return;
      }
      if (this.flow_pair) {
        return;
      }
      return this.events.push('-SEQ');
    }

    got__c_flow_mapping__all__x7b() {
      if (!this.flow_start) {
        return;
      }
      if (this.flow_pair) {
        return;
      }
      return this.events.push('+MAP {}');
    }

    got__c_flow_mapping__all__x7d() {
      if (!this.flow_start) {
        return;
      }
      if (this.flow_pair) {
        return;
      }
      return this.events.push('-MAP');
    }

    got__ns_plain(o) {
      if (this.flow_pair) {
        return;
      }
      return this.events.push(`=VAL :${o.text}`);
    }

    got__c_single_quoted(o) {
      var value;
      if (this.flow_pair) {
        return;
      }
      value = o.text.slice(1, -1);
      return this.events.push(`=VAL '${value}`);
    }

    got__c_double_quoted(o) {
      var value;
      if (this.flow_pair) {
        return;
      }
      value = o.text.slice(1, -1);
      return this.events.push(`=VAL \"${value}`);
    }

  };

  // vim: sw=2:

}).call(this);
