// Generated by CoffeeScript 2.5.1
(function() {
  var TestReceiver;

  require('./prelude');

  global.TestReceiver = TestReceiver = class TestReceiver {
    constructor() {
      this.event = [];
      this.pools = [];
    }

    add(event) {
      if (this.pools.length) {
        return _.last(this.pools).push(event);
      } else {
        return this.send(event);
      }
    }

    pool_up() {
      return this.pools.push([]);
    }

    pool_down() {
      var e, events, i, len, results;
      events = this.pools.pop() || xxxxx(this);
      results = [];
      for (i = 0, len = events.length; i < len; i++) {
        e = events[i];
        results.push(this.add(e));
      }
      return results;
    }

    pool_drop() {
      return this.pools.pop() || xxxxx(this);
    }

    send(event) {
      return this.event.push(event);
    }

    output() {
      return [...this.event, ''].join("\n");
    }

    try__l_yaml_stream() {
      return this.add('+STR');
    }

    got__l_yaml_stream() {
      return this.add('-STR');
    }

    try__l_bare_document() {
      return this.add('+DOC');
    }

    got__l_bare_document() {
      return this.add('-DOC');
    }

    got__c_flow_sequence__all__x5b() {
      return this.add('+SEQ []');
    }

    got__c_flow_sequence__all__x5d() {
      return this.add('-SEQ');
    }

    got__c_flow_mapping__all__x7b() {
      return this.add('+MAP {}');
    }

    got__c_flow_mapping__all__x7d() {
      return this.add('-MAP');
    }

    got__ns_plain(o) {
      return this.add(`=VAL :${o.text}`);
    }

    got__c_single_quoted(o) {
      var value;
      value = o.text.slice(1, -1);
      return this.add(`=VAL '${value}`);
    }

    got__c_double_quoted(o) {
      var value;
      value = o.text.slice(1, -1);
      return this.add(`=VAL \"${value}`);
    }

    got__e_scalar() {
      return this.add("=VAL :");
    }

    try__ns_flow_pair() {
      return this.pool_up();
    }

    got__ns_flow_pair() {
      return xxxxx(this);
    }

    not__ns_flow_pair() {
      return this.pool_drop();
    }

    try__c_ns_flow_map_empty_key_entry() {
      return this.pool_up();
    }

    got__c_ns_flow_map_empty_key_entry() {
      return xxxxx(this);
    }

    not__c_ns_flow_map_empty_key_entry() {
      return this.pool_drop();
    }

  };

  // vim: sw=2:

}).call(this);
