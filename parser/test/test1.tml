#!/usr/bin/env testml

parse(*yaml) == *events
  :"+ -- '{*yaml}'"

=== Empty stream
--- yaml: ""
--- events
+STR
-STR


=== Empty stream with comments
--- yaml(<)
    # comment

    # blank line above
--- ^events


=== Top plain scalar
--- yaml: foo
--- events
+STR
+DOC
=VAL :foo
-DOC
-STR


=== Top plain with newline
--- yaml
foo
--- ^events


=== Top plain with extra ws
--- yaml: "   foo  "
--- ^events


===
--- SKIP: XXX parser infinite loop
--- yaml(<)
    # comment

    foo
--- ^events


=== Top level double quoted scalar
--- yaml(-)
"foo"
--- events
+STR
+DOC
=VAL "foo
-DOC
-STR


=== Top level single quoted sclaar
--- yaml: "'foo'"
--- events
+STR
+DOC
=VAL 'foo
-DOC
-STR


=== Top level literal scalar
--- SKIP: Can't find parser function 'match' at lib/Grammar.pm line 2750
--- yaml(<)
    --- |
      foo
--- events
+STR
+DOC
=VAL |foo\n
-DOC
-STR


=== Empty sequence
--- yaml: []
--- events
+STR
+DOC
+SEQ []
-SEQ
-DOC
-STR


=== Flow sequence
--- yaml: [1,2,3]
--- events
+STR
+DOC
+SEQ []
=VAL :1
=VAL :2
=VAL :3
-SEQ
-DOC
-STR


=== Flow sequence trailing comma
--- yaml: [1,2,3,]
--- ^events


=== Flow sequence with ws
--- yaml: [ 1, 2 , 3  ,]
--- ^events


=== Flow sequence with surrounding ws
--- yaml: "  [1, 2, 3]  "
--- ^events


=== Flow sequence multiline
--- yaml
[ 1,
 2, 3]
--- ^events


=== Flow sequence multiline
--- SKIP: XXX infinite loop
--- yaml
[ 1,
2, 3]
--- ^events


=== Flow sequence with different styles
--- yaml: [1,two,'three',"four"]
--- events
+STR
+DOC
+SEQ []
=VAL :1
=VAL :two
=VAL 'three
=VAL "four
-SEQ
-DOC
-STR


=== Sequence in flow sequence
--- yaml: [[]]
--- events
+STR
+DOC
+SEQ []
+SEQ []
-SEQ
-SEQ
-DOC
-STR


===
--- yaml: {foo: 'bar'}
--- events
+STR
+DOC
+MAP {}
=VAL :foo
=VAL 'bar
-MAP
-DOC
-STR


=== Flow mapping
--- yaml: {foo: 'bar', baz: 42}
--- events
+STR
+DOC
+MAP {}
=VAL :foo
=VAL 'bar
=VAL :baz
=VAL :42
-MAP
-DOC
-STR


=== Flow mapping with empty value
--- yaml: {foo:}
--- events
+STR
+DOC
+MAP {}
=VAL :foo
=VAL :
-MAP
-DOC
-STR


=== Flow mapping explicit key
--- yaml: {? foo: bar}
--- events
+STR
+DOC
+MAP {}
=VAL :foo
=VAL :bar
-MAP
-DOC
-STR


=== Leading ? in flow key
--- yaml: {?foo:}
--- events
+STR
+DOC
+MAP {}
=VAL :?foo
=VAL :
-MAP
-DOC
-STR


=== Key with :
--- yaml: {http://example.com: url}
--- events
+STR
+DOC
+MAP {}
=VAL :http://example.com
=VAL :url
-MAP
-DOC
-STR


=== Double quoted key no space after :
--- yaml: {"http"://example.com}
--- events
+STR
+DOC
+MAP {}
=VAL "http
=VAL ://example.com
-MAP
-DOC
-STR


=== Block mapping
--- SKIP
--- yaml
foo: bar
--- events
+STR
+DOC
+MAP {}
=VAL :foo
=VAL :bar
-MAP
-DOC
-STR
