#!/usr/bin/env perl

#===============================================================================
# This script converts the YAML 1.2 spec HTML (after `lynx` has converted it to
# a plain text representation) into a specific YAML format.
#
# This script is very hacky. The process is done by code so that can be
# repeated and perfected over time. It is not expected that the input file will
# ever change, but the desired output may evolve.
#===============================================================================

use strict;
use warnings;
use YAML::PP;

use XXX;

my $spec;
my $comments;

sub test_yaml_dumper {
  my @tests = (
    'aaa',
    ['aaa'],
    ['(|)', 'aaa', 'bbb'],
    ['(|)', 'aaa', [ 'bbb', 'ccc' ]],
    ['(|)', 'aaa', [ 'bbb', 'ccc' ], 'ddd'],
    [[['aaa', 'bbb']]],
    ['aaa', [ 'bbb', [ 'ccc', [ 'ddd']]]],
  );

  my $i = 1;
  for my $test (@tests) {
    my $data = [{
      rule => {
        num => sprintf("%03d", $i++),
        name => 'test',
        orig => "# test",
        rule => $test,
      },
    }];
    warn YAML::PP->new(footer => 1)->dump_string($test);
    warn dump_yaml($data);
    warn "-------------------------\n";
  }

  exit;
}

sub main {
  # test_yaml_dumper;

  ($spec, $comments) = read_input_files(@_);

  my $data = make_data($spec);
  my $yaml = dump_yaml($data);

  print $yaml;

  print "\n# vim: iskeyword=@,+,- sw=2:\n";
}

sub read_input_files {
  my ($spec_file, $comment_file) = @_;
  open my $spec, $spec_file or
    die "Can't open '$spec_file' for input";
  my $spec_text = do { local $/; <$spec> };
  open my $comment, $comment_file or
    die "Can't open '$comment_file' for input";
  my $comment_yaml = do { local $/, <$comment> };
  my $comment_data = YAML::PP->new->load_string($comment_yaml);
  $spec_text = reformat_input_text($spec_text);

  return ($spec_text, $comment_data);
}

sub format_comment {
  my ($comment) = @_;
  my $line = '#' . ('=' x 79) . "\n";
  $comment =~ s/^/# /gm;
  $comment =~ s/ +$//gm;
  return "$line$comment$line\n";
}

sub reformat_input_text {
  $_ = shift;

  # Get section containing all productions:
  s/.*
    (
      ^5\.1\.\ Character\ Set
      .*
    )
    ^\ \ \ Example\ 9\.6\.\ Stream
    .*
  /$1/smx;

  # Remove reference numbers ([123] and [1234]):
  s/\[\d{3,4}\](?!\s)//g;

  # Collapse broken comments:
  s/(\/\*[^*]+)\n/$1/g;
  s/(\/\*[^*]+)\n/$1/g;

  # Blank out text lines following a rule:
  s/^   [A-Z].*//gm;
  s/^    ? ?\* [A-Z].*//gm;

  # Remove all leading whitespace:
  s/^\ +//gm;

  # Add extra blank lines between paragraphs:
  s/^\[/\n\n[/gm;
  s/\n\n/\n\n\n/gm;

  # Remove all extra prose paragraphs:
  s/\n\n(?!\n|\[\d|\d+\.\d+\.(?:\d+\.)?\ ).*?(?=\n\n)/\n\n/gs;

  # Remove extra blank lines:
  s/\n\n+/\n\n/g;

  # Remove comments
  s/
    \ *\/\*\ +
    (?:
      (?:A|a|0|8|16|32|LF|CR|SP|TAB|DOS|MacOS|UNIX|Key|Value)
      [\-\ \,]
      .*?
    )
    \ *\*\/
  //gx;

  # Fix typo in spec:
  s/safe\(c\)\)/safe(c)/g;

  # Various normalizations:
  s/::= ([ct]) = /::=\n$1 = /g;
  s/⇒/=>/g;
  s/=>\n/=> /g;
  s/::= +/::=\n/g;
  s/ \|\n/ \| /g;
  s/ -\n/ - /g;
  s/  +/ /g;
  # s/“'”/"'"/g;
  s/“(.)”/'$1'/g;
  s/#x/x:/g;
  s/≤/<=/g;
  s/ =\n/ = /g;
  s/\)\)/) )/g;
  s/ × (\S+)/{$1}/g;

  # Make special comments into tokens:
  sub token {
    $_ = lc $_[0];
    s/\) \)/))/g;
    s/ /_/g;
    $_;
  }
  s/\/\*\ (.*?)\ \*\//'<' . token($1) . '>'/ge;

  # Parenthesize => expressions:
  s/^(.* = .*)/( $1 )/gm;

  # Remove unwanted space in a couple rules:
  s/(ns-s-flow-seq-entries\(n,in-flow\(c\)) (\)\?)/$1$2/;
  s/(ns-s-flow-map-entries\(n,in-flow\(c\)) (\)\?)/$1$2/;
  s/(l\+block-sequence\(seq-spaces\(n,c\)) (\))/$1$2/;

  # Add missing parens in rule 211:
  s/(l-document-suffix\+ l-document-prefix\*\nl-any-document\?)(\n\| )(l-document-prefix\* l-explicit-document\?)/( $1 )$2( $3 )/;


  return $_;
}

sub make_data {
  my $text = shift;

  my $data = [];

  for my $comment (@{$comments->{'000'}}) {
    push @$data, { comment => format_comment($comment) };
  }

  while ($text =~ s/^(\S.*?)\n\n+//s) {
    my $para = $1;
    if ($para =~ /^\d/) {
      push @$data, { comment => make_section_comment($para) };
    }
    else {
      push @$data, { rule => make_rule($para) };
    }
  }

  return $data;
}

sub make_section_comment {
  $_ = shift;

  my $comment;

  if (/^\d+\.\d+\.\d+\./) {
    return "##### $_\n\n\n";
  }
  else {
    return "### $_\n\n\n";
  }
}

my ($tokens, $num, $name);
sub make_rule {
  my $text = shift;
  my $orig = $text;

  $text =~ s/^\[(\d+)\]\ (\S+)\ ::=\n// or die $text;
  ($num, $name) = ($1, $2);

  $orig =~ s/^/  /gm;
  $orig =~ s/^  //;
  $orig =~ s/ /\n/;
  $orig =~ s/^/# /gm;
  $orig =~ s/.*\n//;

  make_tokens($text);

  my $rule;
  if ($text =~ /t = .*<end_of_file>/) {
    $rule = special_format_case_or($tokens);
  }
  elsif (
    ref($tokens->[0]) eq 'ARRAY' and
    (grep $_ eq '=>', @{$tokens->[0]})
  ) {
    $rule = special_format($tokens);
  }
  elsif (@$tokens == 1 and not ref $tokens->[0]) {
    $rule = $tokens->[0];
  }
  else {
    $rule = $tokens;
  }

  $name =~ s/s-indent\(<n\)/s-indent-lt(n)/;
  $name =~ s/s-indent\(<=n\)/s-indent-le(n)/;

  my $yaml = "$name: $rule";
  $yaml =~ s/\ +$//gm;
  $yaml = sprintf qq{:%03d: %s\n%s\n\n%s},
    $num, $name, $orig, $yaml;

  $num = sprintf "%03d", $num;
  my $comment = '';
  if ($comment = $comments->{$num}) {
    $comment = format_comment($comment);
  }

  return {
    num => $num,
    name => $name,
    rule => $rule,
    orig => $orig,
    ($comment ? (comment => $comment) : () ),
  };
}

sub special_format {
  my ($tokens) = @_;

  my $e = $tokens->[0];
  if (@$e == 5) {
    if ($e->[4] =~ /-.*-/) {
      return special_format_case($tokens);
    }
    if ($e->[4] =~ /(-in|-out)$/) {
      return special_format_switch($tokens);
    }
    if ($e->[2] eq 't') {
      return special_format_if_set($tokens);
    }
    if ($e->[0] eq 'c') {
      return special_format_switch_var($tokens);
    }
  }
  if (@$e == 7) {
    return special_format_if_set_number($tokens);
  }
  die;
}

sub special_format_case {
  my ($tokens) = @_;
  my $case = {
    'var' => $tokens->[0][0],
  };
  for my $e (@$tokens) {
    my ($s, $r) = @{$e}[2,4];
    $case->{$s} = $r;
  }
  return { '(case)' => $case };
}

sub special_format_case_or {
  my ($tokens) = @_;
  $tokens = [ map $_->[1], @$tokens ];
  my $case = {
    'var' => $tokens->[0][0],
  };
  for my $e (@$tokens) {
    my ($s, $r) = @{$e}[2,4];
    $case->{$s} = flow([ '(|)', $r, '<end_of_stream>' ]);
  }
  return { '(case)' => $case };
}

sub special_format_switch {
  my ($tokens) = @_;
  my $switch = {
    'var' => $tokens->[0][0],
  };
  for my $e (@$tokens) {
    my ($s, $r) = @{$e}[2,4];
    $switch->{$s} = $r;
  }
  return { '(switch)' => $switch };
}

sub special_format_switch_var {
  my ($tokens) = @_;
  my $switch = {
    'var' => $tokens->[0][0],
  };
  for my $e (@$tokens) {
    my ($s, $v) = @{$e}[2,4];
    if ($v eq 'n-1') {
      $v = flow([ '(subtract)', 'n', 1 ]);
    }
    $switch->{$s} = $v
  }
  return { '(switch)' => $switch };
}

sub special_format_if_set {
  my ($tokens) = @_;
  my $if_set = [ '(|)' ];
  for my $e (@$tokens) {
    my ($rule, $var, $val) = @{$e}[0, 2, 4];
    push @$if_set, {
      '(if)' => $rule,
      '(set)' => flow([ $var, $val ]),
    };
  }
  return $if_set;
}

sub special_format_if_set_number {
  my ($tokens) = @_;
  my $if_set = [ '(|)' ];
  for my $e (@$tokens) {
    my ($rule, $var, $val) = @{$e}[0, 2, 4];
    if ($val eq 'ns-dec-digit') {
      $val = '[ (charToInt), (lastMatch) ]';
    } elsif ($val eq 'auto-detect()') {
      $val = '"auto-detect"';
    } else { die }
    push @$if_set, {
      '(if)' => $rule,
      '(set)' => flow([ $var, $val ]),
    };
  }
  return $if_set;
}

sub make_tokens {
  my $text = shift;
  $tokens = [];
  my $insert = [$tokens];
  my @input = split /\s+/, $text;

  for (my $i = 0; $i < @input; $i++) {
    my $token = $input[$i];

    if ($token eq '|' and
        @{$insert->[-1]} > 1 and
        not grep $_ eq '|', @{$insert->[-1]}
    ) {
      my $array = $insert->[-1];
      @$array = ([@$array], '|');
      next;
    }

    if ($token eq '(') {
      my $array = [];

      push @{$insert->[-1]}, $array;
      push @$insert, $array;
      next;
    }

    if ($token =~ /^\)([\*\+\?]?)/) {
      my $q = $1 || '';
      my $array = pop @$insert;
      if (@$array > 1 and $array->[1] =~ /^[-|]$/) {
        my $operator = $array->[1];
        @$array = grep { $_ ne $operator } @$array;
        unshift @$array, "($operator)";
        if ($q) {
          my @array;
          while (@$array) {
            push @array, shift(@$array);
          }
          push @$array, "($q)", \@array;
        }
      }
      elsif ($q) {
        unshift @$array, "($q)";
      }
      next;
    }

    if ($token =~ /<where_m_(<=?)_n>/) {
      my $array = $insert->[-1];
      push @$array, flow([ "($1)", [ '(length)', '(lastMatch)' ], 'n']);
      unshift @$array, '(&)';
      next;
    }

    if ($token =~ /<for_some_fixed_auto-detected_m_>_0>/) {
      my $array = $insert->[-1];
      unshift @$array, flow({'(set)' => [ 'm', '<auto_detect_indent>' ]});
      next;
    }

    if ($token =~ /<excluding_c-forbidden_content>/) {
      my $array = $insert->[-1];
      push @$array, flow({'(exclude)' => 'c-forbidden'});
      next;
    }

    if ($token =~ /<at_most_1024_characters_altogether>/) {
      my $array = $insert->[-1];
      push @$array, flow({'(limit)' => 1024});
      next;
    }

    push @{$insert->[-1]}, format_token($token);
  }

  if (@$tokens > 1 and $tokens->[1] =~ /^[-|]$/ and $tokens->[0] ne $tokens->[1]) {
    my $operator = $tokens->[1];
    my $i = 0;
    @$tokens = grep { ++$i % 2 } @$tokens;
    unshift @$tokens, "($operator)";
  }

  for (my $i = 0; $i < @$tokens; $i++) {
    my $token = $tokens->[$i];
    if (ref($token) eq 'ARRAY' and @$token == 1) {
      $tokens->[$i] = $token->[0];
    }
  }

  if (
    ref($tokens) eq 'ARRAY' and
    @$tokens == 1 and
    ref($tokens->[0]) eq 'ARRAY'
  ) {
    $tokens = $tokens->[0];
  }

  if (
    ref($tokens) eq 'ARRAY' and
    @$tokens >= 2
  ) {
    if ($tokens->[1] eq '<for_some_fixed_auto-detected_m_>_0>') {
      my $token = $tokens->[1];
      $tokens = $tokens->[0];
      splice(@$tokens, 1, 0, $token);
    }
    elsif (
      ref($tokens->[-1]) eq 'HASH' && (
        $tokens->[-1]->{'(exclude)'} ||
        $tokens->[-1]->{'(limit)'}
      )
    ) {
      unshift @$tokens, pop @$tokens;
    }
  }

  # warn $ypp->dump(["($num) $name", $text, $tokens]) if $num >= 1;
}

sub format_token {
  $_ = shift;

  if (/^x:(.*)/) {
    $_ = format_hex($1);
  }
  elsif (/^\[x:(.*)-x:(.*)\]$/) {
    $_ = format_hex($1) . '-' . format_hex($2);
  }
  elsif (/^'(.*)'/) {
    $_ = $1;
  }

  s/\{m\}$/*/;
  s/<end_of_file>/<end_of_stream>/;
  s/((?:block|flow)-(?:in|out|key)(?=[,\)]|\ \]))/"$1"/g;
  s/<an_ns-char_preceding>/ns-char<=/;
  s/<followed_by_an_(.*)>/$1=/;
  s/<not_followed_by_an_(.*)>/$1!/;
  s/s-indent\(<n\)/s-indent-lt(n)/;
  s/s-indent\(<=n\)/s-indent-le(n)/;
  s{n/a}{null};

  $_;
}

sub format_hex {
  $_ = shift;
  if (length("$_") % 2) {
    $_ = "0$_"
  }
  return "x$_";
}

my @stack;
my %flows;
sub dump_yaml {
  {
    my ($data) = @_;

    @stack = ('map');
    my $yaml = '';

    for my $next (@$data) {
      if (my $comment = $next->{comment}) {
        $yaml .= $comment;
      }
      elsif (my $rule = $next->{rule}) {
        if (my $comment = $rule->{comment}) {
          $yaml .= $comment;
        }
        $yaml .= sprintf ":%03d: %s\n%s\n\n%s:%s\n\n\n",
          @{$rule}{qw<num name orig name>},
          (dump_rule($rule->{rule}));
      }
      else {
        XXX $next;
      }
    }

    $yaml =~ s/\n+\z/\n/;

    # Fix-ups:
    $yaml =~ s/^(\w+-\w\S*: )n$/$1'n'/m;
    $yaml =~ s/^- t$/- 't'/m;

    return $yaml;
  }

  sub flow {
    $flows{$_[0]} = 1;
    return $_[0];
  }

  sub in_flow {
    $stack[-1] eq 'flow' ? 1 : 0;
  }

  sub stack_push {
    my ($kind) = @_;
    $kind = 'flow' if in_flow();
    push @stack, $kind;
  }

  sub stack_pop {
    pop @stack;
  }

  sub indent_yaml {
    my ($text) = @_;
    return $text if
      $stack[-1] eq 'flow' or
      $stack[-1] eq 'seq' and
      $stack[-2] eq 'map';
    $text =~ s/^/  /gm;
    $text =~ s/\A *//;
    return $text;
  }

  sub dump_rule {
    my ($rule) = @_;

    my $dump = dump_node($rule);

    ($dump =~ /\n/ ? "\n" : ' ') .
    (ref($rule) eq 'HASH' ? '  ' : '') .
    $dump .
    ($dump =~ /\n/ ? '': "\n");
  }

  sub dump_node {
    my ($node) = @_;
    my $ref = ref $node;

    if (not $ref) {
      return dump_scalar($node);
    }

    if ($ref eq 'ARRAY') {
      if ($flows{$node} or in_flow()) {
        return dump_array_flow($node);
      }
      return dump_array_block($node);
    }

    if ($ref eq 'HASH') {
      if ($flows{$node} or in_flow) {
        return dump_hash_flow($node);
      }
      return dump_hash_block($node);
    }
  }

  sub dump_scalar {
    my ($scalar) = @_;

    return $scalar if $scalar =~ /^([cmnt1-9])$/;

    return "''''" if $scalar eq "'";

    return "'$scalar'" if length($scalar) == 1;

    return qq'"$scalar"' if
      $scalar =~ /^(block|flow)-(in|out|key)$/ or
      $scalar =~ /^(clip|keep|strip)$/;

    return $scalar;
  }

  sub dump_array_block {
    my ($array) = @_;

    stack_push('seq');
    my $yaml = '';
    for my $next (@$array) {
      my $dump = dump_node($next);
      chomp $dump;
      $yaml .= "- $dump\n";
    }
    $yaml = indent_yaml $yaml;
    stack_pop;

    return $yaml;
  }

  sub sort_keys {
    return -1 if $a eq 'var';
    return 1 if $b eq 'var';
    return $a cmp $b;
  }

  sub dump_hash_block {
    my ($hash) = @_;

    stack_push('map');
    my $yaml = '';
    for my $key (sort sort_keys keys %$hash) {
      my $value = dump_node($hash->{$key});
      chomp $value;
      $yaml .=
        dump_scalar($key) .
        ':' .
        ($value =~ /\n/ ? "\n  " : ' ') .
        $value .
        "\n";
    }
    $yaml = indent_yaml $yaml;
    stack_pop;

    return $yaml;
  }

  sub dump_array_flow {
    my ($array) = @_;
    stack_push('flow');
    my @list = map dump_node($_), @$array;
    stack_pop;
    return '[ ' . join(', ', @list) . ' ]';
  }

  sub dump_hash_flow {
    my ($hash) = @_;
    stack_push('flow');
    my @pair = map {
      sprintf "%s: %s", dump_scalar($_), dump_node($hash->{$_})
    } sort keys %$hash;
    stack_pop;
    my $yaml = join(', ', @pair);
    return in_flow()
      ? "{ $yaml }"
      : $yaml;
  }
}

main @ARGV;

# vim: sw=2:
